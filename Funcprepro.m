function Funcprepro(s)
%Accepts subject number as input. Conducts slice timing, realignment, and
%coregistration for SaTC.3 functionals

% Adapted from ETS Scripts written by Crystal Reeck
% Composed by Anthony Resnick 6/08/2017

% Test Data: Epi tests, and sub990 scans
% Subject Data: Our subjects to be used for final analysis

% generalizes the batch and script (test and test_job) generated by spm12

% To create new preprocessing script, run new modules on .nii from each run and
% select generated 'dependency' files according to this script
scriptdir = pwd;
subID = num2str(s);
cd('..')
maindir = pwd;
rawdir = [maindir, '/Raw']
%Laptop Setup. 
outputdir = [maindir, '/Preprocessed']; %Where should images be output? 
subdir = [outputdir,'/',subID,'_3D'];
inputfile = [subdir,'/',subID,'_inputs.mat'];

cd(subdir)

load(inputfile);
dname = inputs.niftidir;
defaults = spm('defaults','fmri');

%-------------------------------------------------------------------------%
%   slicetiming correction
%-------------------------------------------------------------------------%
nslices = inputs.nslices; %number of slices
TR = 2; %TR

tic;
% Based on Siemens 3T slice acquisition
if mod(nslices,2) == 0 % if nslices is even
    sliceorder = [2:2:nslices 1:2:nslices]; %interleaved, bottom-->top
    refslice = 1; %reference slice - middle acquired slice
else % if nslices is odd
    sliceorder = [1:2:nslices 2:2:nslices];
    refslice = 2; %reference slice - middle acquired slice
end

% Data, # Sessions = # Runs
matlabbatch{1}.spm.temporal.st.scans = inputs.functionals';

matlabbatch{1}.spm.temporal.st.nslices = nslices;
matlabbatch{1}.spm.temporal.st.tr = TR;
matlabbatch{1}.spm.temporal.st.ta = TR - TR/nslices;
matlabbatch{1}.spm.temporal.st.so = sliceorder;
matlabbatch{1}.spm.temporal.st.refslice = refslice;
matlabbatch{1}.spm.temporal.st.prefix = 'a';


%-------------------------------------------------------------------------%
%   realignment
%-------------------------------------------------------------------------%

% Data, # Sessions = # Runs
for index = 1:size(inputs.functionals',2);
    matlabbatch{2}.spm.spatial.realign.estwrite.data{index}(1) = cfg_dep(sprintf('Slice Timing: Slice Timing Corr. Images (Sess %d)',index),...
        substruct('.','val', '{}',{1}, '.','val', '{}',{1}, '.','val', '{}',{1}), substruct('()',{index}, '.','files'));
end

matlabbatch{2}.spm.spatial.realign.estwrite.eoptions.quality = 0.9;
matlabbatch{2}.spm.spatial.realign.estwrite.eoptions.sep = 4;
matlabbatch{2}.spm.spatial.realign.estwrite.eoptions.fwhm = 5;
matlabbatch{2}.spm.spatial.realign.estwrite.eoptions.rtm = 1;
matlabbatch{2}.spm.spatial.realign.estwrite.eoptions.interp = 4;
matlabbatch{2}.spm.spatial.realign.estwrite.eoptions.wrap = [0 0 0];
matlabbatch{2}.spm.spatial.realign.estwrite.eoptions.weight = '';
matlabbatch{2}.spm.spatial.realign.estwrite.roptions.which = [0 1];
matlabbatch{2}.spm.spatial.realign.estwrite.roptions.interp = 4;
matlabbatch{2}.spm.spatial.realign.estwrite.roptions.wrap = [0 0 0];
matlabbatch{2}.spm.spatial.realign.estwrite.roptions.mask = 1;
matlabbatch{2}.spm.spatial.realign.estwrite.roptions.prefix = 'r';

%% Coregistration
matlabbatch{3}.spm.spatial.coreg.estimate.ref(1) = cfg_dep('Realign: Estimate & Reslice: Mean Image', substruct('.','val', '{}',{2}, '.','val', '{}',{1}, '.','val', '{}',{1}, '.','val', '{}',{1}), substruct('.','rmean'));
t1list=sort(cellstr(strtrim(inputs.T1)));
matlabbatch{3}.spm.spatial.coreg.estimate.source = {t1list{1}};
matlabbatch{3}.spm.spatial.coreg.estimate.other = {''};
matlabbatch{3}.spm.spatial.coreg.estimate.eoptions.cost_fun = 'nmi';
matlabbatch{3}.spm.spatial.coreg.estimate.eoptions.sep = [4 2];
matlabbatch{3}.spm.spatial.coreg.estimate.eoptions.tol = [0.02 0.02 0.02 0.001 0.001 0.001 0.01 0.01 0.01 0.001 0.001 0.001];
matlabbatch{3}.spm.spatial.coreg.estimate.eoptions.fwhm = [7 7];

%% Save Pre-processing batch file, Run job
save(fullfile(subdir,['FuncPreProc-st_realign_coreg-' date '.mat']),'matlabbatch');
cd(subdir)
spm('defaults', 'FMRI');
spm_jobman('serial', matlabbatch);

cd(scriptdir)
end
